esphome:
  name: ${device_name}

esp32:
  board: esp32dev

    ##### Functionality for the Nextion display #####
captive_portal:

web_server:
  port: 80
  auth:
    username: admin
    password: ${web_password}

external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h

wifi:
  ssid: $wifi_ssid
  password: $wifi_password
  #fast_connect: on
  #manual_ip:
  #  static_ip: $ip
  #  gateway: $gateway
  #  subnet: $subnet
  #  dns1: $dns1

logger:
  baud_rate: 0

# Ringtone support
rtttl:
  id: buzzer
  output: buzzer_out

# Beeper Output
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# UART for Display
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# ESP Restart button
button:
  - platform: restart
    name: ${device_name}_restart 
    id: restart_${device_name}_

ota:
  password: $ota_password

api:
  services:
    ##### Service to update the HMI file #####
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'

    ##### Service to control the visible page from Home Assistant #####
    - service: set_page
      variables:
        page: int
      then:
        - lambda: id(disp1).send_command_printf("page %i", page);

    ##### SERVICE TO UPDATE THE TFT FILE from URL #####
    - service: upload_tft_url
      variables:
        url: string
      then:
        - lambda: 'id(disp1)->set_tft_url(url.c_str());'
        - lambda: 'id(disp1)->upload_tft();'   

    ##### Service to send a command "printf" directly to the display #####
    - service: send_command_printf
      variables:
        cmd: string
      then:
        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'

    ##### Service to send a command "text_printf" directly to the display #####
    - service: send_command_text_printf
      variables:
        component: string
        message: string
      then:
        - wait_until:
              switch.is_on: nextion_init
        - lambda: 'id(disp1).set_component_text_printf(component.c_str(), "%s", message.c_str());'

    ##### Service to send a command "component_value (Dualstate Button)" directly to the display #####
    - service: send_command_value
      variables:
        component: string
        message: int
      then:
        - wait_until:
              switch.is_on: nextion_init
        - lambda: 'id(disp1).set_component_value(component.c_str(), message);'

    ##### Service to send a command "hide componente" directly to the display #####
    - service: send_command_hide
      variables:
        component: string
      then:
        - wait_until:
              switch.is_on: nextion_init
        - lambda: 'id(disp1).hide_component(component.c_str());'

    ##### Service to send a command "show componente" directly to the display #####
    - service: send_command_show
      variables:
        component: string
      then:
        - wait_until:
              switch.is_on: nextion_init
        - lambda: 'id(disp1).show_component(component.c_str());'

    ##### Service to send a command "font color" directly to the display #####
    - service: send_command_font_color
      variables:
        component: string
        message: int
      then:
        - wait_until:
              switch.is_on: nextion_init
        - lambda: 'id(disp1).set_component_font_color(component.c_str(), message);'

    ##### Service to send a command "background color" directly to the display #####
    - service: send_command_background_color
      variables:
        component: string
        message: int
      then:
        - wait_until:
              switch.is_on: nextion_init
        - lambda: 'id(disp1).set_component_background_color(component.c_str(), message);'        

    ##### Service to show a notification on the screen for 60 s. Tap or wait to close #####
    - service: notification_show
      variables:
        timedate: string
        header: string
        message: string
      then:
        - wait_until:
              switch.is_on: nextion_init              
        - lambda: |-
            id(disp1).send_command_printf("page notification");  
            id(disp1).set_component_text_printf("notification.timedate", "%s", timedate.c_str());      
            id(disp1).set_component_text_printf("notification.head", "%s", header.c_str());
            id(disp1).set_component_text_printf("notification.body", "%s", message.c_str());
            id(notification_timedate).publish_state(timedate.c_str());
            id(notification_header).publish_state(header.c_str());
            id(notification_message).publish_state(message.c_str());
            id(disp1).send_command_printf("home.notif_status.pic=%i", 17);
        - switch.turn_on: notification_unread 
        - if:
            condition:
              switch.is_on: notification_sound
            then:
              - rtttl.play: "two short:d=4,o=5,b=100:16e6,16e6"         
        - delay: 60s
        - lambda: id(disp1).send_command_printf("page home");                   
      ##### Service to clear the notification #####
    - service: notification_clear
      then:
        - wait_until:
              switch.is_on: nextion_init
        - lambda: |-
            id(notification_timedate).publish_state("");
            id(notification_header).publish_state("");
            id(notification_message).publish_state("");
            id(disp1).set_component_text_printf("notification.timedate", " ");
            id(disp1).set_component_text_printf("notification.head", " ");
            id(disp1).set_component_text_printf("notification.body", " ");
            id(disp1).send_command_printf("page home");
            id(disp1).send_command_printf("home.notif_status.pic=%i", 16);          
        - switch.turn_off: notification_unread

    ##### Service to wake up screen #####
    - service: wakeup_screen
      then:
        - lambda: |-
            id(disp1).send_command_printf("page home"); 
    ##### Service to play ringtone #####
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda "return song_str;"            

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: id(disp1).set_component_text_printf("home.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
    on_time_sync:
        then:
          - wait_until:
              switch.is_on: nextion_init
          - lambda: id(disp1).set_component_text_printf("home.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);

globals:
  ##### tset para target temperature #####
  - id: tset
    type: float
    restore_value: no
    initial_value: '0.0'

  ##### Save Display background for NSPanel reboot #####
  - id: display_background_global
    type: int
    restore_value: true
    initial_value: ${default_background}

  ##### Temperature Correction #####
  - id: temperature_correction_global
    type: float
    restore_value: true
    initial_value: ${v_offset}

  ##### Save Display Brightness for NSPanel reboot #####
  - id: display_brightness_global
    type: int
    restore_value: true
    initial_value: '100'

  ##### Save Display DIM Brightness for NSPanel reboot
  - id: display_dim_brightness_global
    type: int
    restore_value: true
    initial_value: '10'

  ##### Save Display DIM Brightness for NSPanel reboot
  - id: sleep_modus_global
    type: int
    restore_value: true
    initial_value: '0'

  ##### lastclick_general State #####
  - id: lastclick_general_global
    type: std::string
    restore_value: no
    initial_value: ''

binary_sensor:
  ##### botones fÃ­sicos ####
  - platform: gpio
    id: panel_button_relay1
    name:  Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      - rtttl.play: "beep:d=32,o=7,b=100: d"
      - homeassistant.service:
          service: climate.turn_on
          data:    
            entity_id: ${climate}  

  - platform: gpio
    id: panel_button_relay2
    name:  Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - rtttl.play: "beep:d=32,o=7,b=100: d"
      - homeassistant.service:
          service: climate.turn_off
          data:    
            entity_id: ${climate}           

  # binary_sensor: Any Button Beep
  - platform: nextion
    id: beeper
    page_id: 1
    component_id: 1
    on_press:
      - rtttl.play: "beep:d=32,o=7,b=100: c"    

  ##### Restart NSPanel Button - Setting Page #####
  - platform: nextion
    name:  Restart
    page_id: 3
    component_id: 7
    internal: true
    on_click:
      - button.press: restart_

  ##### Sleep Modus NSPanel Button #####
  - platform: nextion
    name:  Sleep Modus
    page_id: 3
    component_id: 2
    internal: true
    on_click:
      - switch.toggle: sleep_modus

  ##### Hotwater Charge #####
  - platform: nextion
    name:  Hotwater Charge
    page_id: 0
    component_id: 25
    on_release:
      then: 
      - rtttl.play: "beep:d=32,o=7,b=100: d"
      - homeassistant.service:
          service: switch.toggle
          data: 
            entity_id: ${ha_hotwater_charge} 

  - platform: nextion
    name: $device_name delete_notification
    page_id: 2
    component_id: 11
    on_release:
      then: 
      - homeassistant.service:
          service: esphome._notification_clear
  - platform: nextion
    name: $device_name nodelete_notification
    page_id: 2
    component_id: 10
    on_release:
      then: 
        - lambda: id(disp1).send_command_printf("page home");

  - platform: nextion
    name: $device_name temp_up
    page_id: 0
    component_id: 27
    on_release:
      then: 
      - rtttl.play: "beep:d=32,o=7,b=100: d"  
      - lambda: |-
          id(tset) = id(temp_objetivo).state;
          id(tset) = id(tset) + 0.5;
          if (id(tset) > 30){
            id(tset) = 30;
          }
      - homeassistant.service:
          service: climate.set_temperature
          data_template:
            temperature: "{{my_temp_objetivo|float}}"
          variables:
            my_temp_objetivo: |-
              return id(tset);
          data:    
            entity_id: $climate

  - platform: nextion
    name: $device_name temp_dn
    page_id: 0
    component_id: 26
    on_release:
      then: 
      - rtttl.play: "beep:d=32,o=7,b=100: d"  
      - lambda: |-
          id(tset) = id(temp_objetivo).state;
          id(tset) = id(tset) - 0.5;
          if (id(tset) < 20){
            id(tset) = 20;
          }
      - homeassistant.service:
          service: climate.set_temperature
          data_template:
            temperature: "{{my_temp_objetivo|float}}"
          variables:
            my_temp_objetivo: |-
              return id(tset);
          data:    
            entity_id: $climate

sensor:

  ##### Uptime #####
  - platform: uptime
    name:  uptime
    disabled_by_default: true

  ##### WIFI Signal stregth #####
  - platform: wifi_signal
    name:  RSSI
    update_interval: 60s

  ##### Internal temperature sensor, adc value. ####
  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  ##### Internal temperature sensor, adc reading converted to resistance (calculation) #####
  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  ##### Internal temperature sensor, resistance to temperature (calculation) #####
  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    filters:
      - median:
          window_size: 5
          send_every: 5
          send_first_at: 1
      - lambda: return x + id(temperature_correction_global);
    name: $device_name Temperature
    on_value:
      - lambda: 'id(disp1).set_component_text_printf("home.current_temp", "%.1f""\xb0", x);'   

  ##### get target temperature from climate in HA #####
  - platform: homeassistant
    id: temp_objetivo
    entity_id: $climate
    attribute: temperature
    internal: true
    on_value:
      then:
        - lambda: 'id(disp1).set_component_text_printf("home.target_temp", "%.1f""\xb0", x);'

  ###### Display Brightness GET VALUE FROM NSPanel SLIDER #####
  - platform: nextion
    id: brightslider
    name: ${device_name}_brightness_Slider
    variable_name: brightslider
    internal: true
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - number.set:
            id: display_brightness
            value: !lambda 'return int(x);'
          # send text field percentage of current_lightslider_val  
        - lambda: id(disp1).set_component_text_printf("settings.a03", "%i", id(display_brightness_global));

  ###### Display DIM Brightness GET VALUE FROM NSPanel SLIDER #####
  - platform: nextion
    id: dimslider
    name: ${device_name}_dim_brightness_slider
    variable_name: dimslider
    internal: true
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - number.set:
            id: display_dim_brightness
            value: !lambda 'return int(x);'
          # send text field percentage of current_lightslider_val  
        - lambda: id(disp1).set_component_text_printf("settings.a04", "%i", id(display_dim_brightness_global));

 ##### Temperature outside, fetched from HA #####
  - platform: homeassistant
    id: current_temperature
    entity_id: ${t_outdoor}
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: 'id(disp1).set_component_text_printf("home.outdoor_temp", "%.1f""\xb0", x);' 

  - platform: homeassistant
    id: t_acs_${device_name}
    entity_id: ${t_acs}
    internal: True
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |- 
            if (x >= 35 ) {
              id(disp1).set_component_font_color("home.hotwater_temp", "1032");
            } else {
              id(disp1).set_component_font_color("home.hotwater_temp", "0");
            }           
        - lambda: 'id(disp1).set_component_text_printf("home.hotwater_temp", "%.1f""\xb0", x);'        

text_sensor:

  - platform: homeassistant
    id: heat_status
    name: ${device_name}_heat_status
    entity_id: $climate
    attribute: hvac_action
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init  
        - lambda: |- 
            if (strcmp(id(heat_status).state.c_str(),"heating") == 0) {
              id(disp1).set_component_font_color("home.target_temp", "63488");
            } else {
              id(disp1).set_component_font_color("home.target_temp", "0");
            }                

  ##### ESPhome version used to compile the app #####  
  - platform: version
    name: ${device_name}_ESPhome_Version
    disabled_by_default: true

  ##### get ip and print it in loading screen #####  
  - platform: wifi_info
    ip_address:
      disabled_by_default: true
      name: $device_name_IP_address
      id: ip_address
      on_value:
        then:
          - wait_until:
              switch.is_on: nextion_init
          - lambda: id(disp1).set_component_text_printf("loading.assigned_ip", "%s", id(ip_address).state.c_str());
    ssid:
      name: ${device_name}_SSID
      disabled_by_default: true
    bssid:
      name: ${device_name}_BSSID
      disabled_by_default: true

  ##### follow components of the notificationmessage #####
  - platform: template
    name: ${device_name}_Notification_timedate
    id: notification_timedate

  - platform: template
    name: ${device_name}_Notification_header
    id: notification_header

  - platform: template
    name: ${device_name}_Notification_message
    id: notification_message

  ##### last click sensor, the main action variable - push to HA #####
  - platform: nextion
    nextion_id: disp1
    name: ${device_name}_Last_Click
    id: disp1_lastclick_general
    update_interval: 50ms
    component_name: lastclick
    internal: false
    filters:
      - lambda: |-
          if (strcmp(x.c_str(), id(lastclick_general_global).c_str()) != 0) {
            return x;
          } else {
            return {};
          }
    on_value:
      then:
        - globals.set:
            id: lastclick_general_global
            value: !lambda return x;

  ##### last click lightsettings page, the main action variable - push to HA #####

  - platform: homeassistant
    id: acs_status_${device_name}
    name: $device_name_acs_status
    entity_id: $switch_acs
    on_value:      
      then:
        - lambda: |-
            int symbol = 14;
            if (id(acs_status_$device_name).state == "off") {
              symbol = 14;
            }
              else {
                symbol = 15;
              }  
            id(disp1).send_command_printf("home.acs_status.pic=%i", symbol);
  - platform: homeassistant
    id: termostato_status_${device_name}
    entity_id: $climate
    on_value:      
      then:
        - lambda: |-
            int symbol = 13;
            int symbol2 = 10;
            if (id(termostato_status_$device_name).state == "off") {
              symbol = 13;
              symbol2 = 10;
            }
              else {
                symbol = 12;
                symbol2 = 11;
              }  
            id(disp1).send_command_printf("home.thermo_on.pic=%i", symbol);
            id(disp1).send_command_printf("home.thermo_off.pic=%i", symbol2);        
# switch: botones del panel para controlar reles
switch:

  ##### Restart switch ######
  - platform: restart
    name: ${device_name}_Restart

  ##### global variable to keep track on whether the Nextion display is ready or not. Delays initial info from HA to the display #####
  - platform: template
    name: ${device_name}_Nextion_inited
    id: nextion_init
    entity_category: config
    restore_state: false
    assumed_state: off
    optimistic: true

  ##### Notification unread #####
  - platform: template
    name: ${device_name}_Notification_unread
    id: notification_unread
    entity_category: config
    restore_state: true
    optimistic: true

  ##### Notification sound #####
  - platform: template
    name: ${device_name}_Notification_sound
    id: notification_sound
    entity_category: config
    restore_state: true
    optimistic: true

  ##### Confirmation Message #####
  - platform: template
    name: ${device_name}_Confirmation_Message
    id: confirmation_message
    entity_category: config
    restore_state: false
    optimistic: true  

  ##### UPDATE TFT DISPLAY #####
  - platform: template
    name: ${device_name}_Update_TFT_display
    id: tft_update
    entity_category: config
    turn_on_action:
      - delay: 16ms
      - lambda: id(disp1).upload_tft();
      - switch.turn_off: tft_update

  ##### PHYSICAL SWITCH 1 #####
  - platform: gpio
    id: relay_1
    name:  ${device_name}_Relay_1
    icon: mdi:electric-switch
    pin:
      number: 22

  ##### PHYSICAL SWITCH 2 #####
  - platform: gpio
    id: relay_2
    name:  ${device_name}_Relay_2
    icon: mdi:electric-switch
    pin:
      number: 19

  ##### DISPLAY ALWAYS ON #####
  - platform: gpio
    name: ${device_name}_Screen_Power
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON
    internal: true

  ##### Switch Display Sleep Modus #####
  - platform: template
    device_class: switch
    name: ${device_name}_Sleep_Modus
    id: sleep_modus
    entity_category: config
    restore_state: true
    assumed_state: false
    optimistic: true
    on_turn_off:
      - lambda: id(disp1).send_command_printf("home.sleepmodus.val=0");
      - globals.set:
            id: sleep_modus_global
            value: '0'
      - lambda:  id(disp1).set_component_value("settings.a02",0);
    on_turn_on:
      - lambda: id(disp1).send_command_printf("home.sleepmodus.val=1");
      - globals.set:
            id: sleep_modus_global
            value: '1'
      - lambda:  id(disp1).set_component_value("settings.a02",1);

number:

  ##### SCREEN BRIGHTNESS #####
  - platform: template
    name: ${device_name}_Display_Brightness
    id: display_brightness
    entity_category: config
    unit_of_measurement: '%'
    min_value: 1
    max_value: 100
    step: 1
    restore_value: true
    optimistic: true
    set_action:
      then:
        - lambda: 'id(disp1).set_backlight_brightness(x/100);'
        - lambda: 'id(disp1).send_command_printf("home.brightness.val=%i", int(x));'
        - globals.set:
            id: display_brightness_global
            value: !lambda 'return int(x);'

  ##### SCREEN BRIGHTNESS DIMMED DOWN #####
  - platform: template
    name: ${device_name}_Display_Brightness_Dimdown
    id: display_dim_brightness
    entity_category: config
    unit_of_measurement: '%'
    min_value: 1
    max_value: 100
    step: 1
    restore_value: true
    optimistic: true
    set_action:
      then:
        - lambda: 'id(disp1).send_command_printf("home.brightdd.val=%i", int(x));'
        - globals.set:
            id: display_dim_brightness_global
            value: !lambda 'return int(x);'

  ##### Temperature Correction #####
  - platform: template
    name: ${device_name}_Temperature_Correction
    id: temperature_correction
    entity_category: config
    unit_of_measurement: 'Â°C'
    min_value: -10
    max_value: 10
    initial_value: 0
    step: 0.5
    restore_value: true
    optimistic: true
    set_action:
      then:
        - globals.set:
            id: temperature_correction_global
            value: !lambda 'return x;'

  ##### nspanel background display #####
  - platform: template
    name: ${device_name}_Background Display
    id: background_display
    entity_category: config
    min_value: 0
    max_value: 3
    initial_value: 0
    step: 1
    restore_value: true
    optimistic: true
    set_action:
      then:
        - globals.set:
            id: display_background_global
            value: !lambda 'return x;'


# Display Setup
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: $tft_url
    on_setup:
      then:
        - rtttl.play: "KnRider:d=4,o=6,b=120:16d.5,32d#.5,32d.5,8a.5"
        - lambda: id(disp1).send_command_printf("page 1"); 
        - lambda: id(disp1).set_component_text("status", "CONECTANDO...");               
        - wait_until:
            api.connected
        - delay: 0.5s
        - number.set:
            id: display_brightness
            value: !lambda 'return id(display_brightness_global);'
        - number.set:
            id: display_dim_brightness
            value: !lambda 'return id(display_dim_brightness_global);'
        - lambda: 'id(disp1).send_command_printf("home.backgrd_image.pic=%i", id(display_background_global));'    
        - lambda: id(disp1).set_component_text_printf("home.zona", "%s", "${room}");           
        - lambda: id(disp1).set_component_text_printf("settings.a03", "%i", id(display_brightness_global));
        - lambda: id(disp1).set_component_text_printf("settings.a04", "%i", id(display_dim_brightness_global));
        - lambda: id(disp1).send_command_printf("settings.brightslider.val=%i", id(display_brightness_global));
        - lambda: id(disp1).send_command_printf("settings.dimslider.val=%i", id(display_dim_brightness_global));
        - lambda: id(disp1).send_command_printf("home.sleepmodus.val=%i", id(sleep_modus_global));
        - lambda: |-
            id(disp1).set_component_value("settings.a02",0);
            if (id(sleep_modus_global) == 1) 
            {
              id(disp1).set_component_value("settings.a02",1);
            }
        - delay: 0.5s
        - switch.template.publish:
            id: nextion_init
            state: on
        - lambda: id(disp1).send_command_printf("page 0");       
